package controller;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;

import yychat.model.Message;
import yychat.model.User;

public class StartServer {
    ServerSocket ss;
	Socket s;
	ObjectOutputStream oos;
	
	public static HashMap hmSocket=new HashMap<String,Socket>();//泛型，通用类，键值对
	String userName;
	String passWord;
	public StartServer(){
		try {
			ss=new ServerSocket(3456);
            System.out.println("服务器启动，在监听3456端口...");
			while(true){ 
			s=ss.accept();
			System.out.println(s);
			ObjectInputStream ois;
			//输入流
			ois=new ObjectInputStream(s.getInputStream());
			User user=(User)ois.readObject();
			userName=user.getUserName();
			passWord=user.getPassWord();
			System.out.println(user.getUserName());
			System.out.println(user.getPassWord());
			
			//使用数据库来验证用户和密码
			//1.加载驱动程序
			Class.forName("com.mysql.jdbc.Driver");
			
			//2.建立连接
			String url="jdbc:mysql://127.0.0.1:3306/yychat?useUnicode=true&characterEncoding=UTF-8";
			String dbuser="root";
			String dbpass="";
			Connection conn=DriverManager.getConnection(url,dbuser,dbpass);
			
			//3.建立一个preparedStatement
			String user_Login_Sql="select * from user where username=? and password=?";
			PreparedStatement ptmt=conn.prepareStatement(user_Login_Sql);
			ptmt.setString(1, userName);
			ptmt.setString(2, passWord);
			
			//4.执行preparedStatment
			ResultSet rs=ptmt.executeQuery();
			
			//5.判断结果集
			boolean loginSuccess=rs.next();
			
			
			
			//Server端验证密码是否“123456”
			Message mess=new Message();
			mess.setSender("sender");
			mess.setReceiver(user.getUserName());
			//mess.setContent(content);
			if(loginSuccess){//不能用“==”，对象比较
				
				//消息传递，创建一个Message对象
				
				mess.setMessageType("1");//验证通过
				
				String friend_Relation_Sql="select slaveuser from relation where majoruser=? and slaveuser='1'";
				ptmt=conn.prepareStatement(friend_Relation_Sql);
				ptmt.setString(1, userName);
				rs=ptmt.executeQuery();
				String friendString="";
				while(rs.next()){//移动结果集中的指针，一个个的取出好友的名字
					//rs.getString(1);
					friendString=friendString+rs.getString("slaveruser");
				}
				mess.setContent(friendString);
				System.out.println(userName+"的全部好友："+friendString);
				//保存每一个用户对应的Socket
				hmSocket .put(userName, s);
				
				
				//如何接受客户端聊天信息？另建一个线程来接收
				new ServerReceiverThread(s,hmSocket).start();
			
			}
			else{
				
				mess.setMessageType("0");//验证不通过
			}
			sendMessage(s,mess);
			
			
			}
		} catch (IOException | ClassNotFoundException | SQLException e) {
			e.printStackTrace();
		}
	}

	public void sendMessage(Socket s,Message mess) throws IOException {
		oos=new ObjectOutputStream(s.getOutputStream());
		oos.writeObject(mess);
	}
    
	public static void main(String[] args) {
	
}
}
